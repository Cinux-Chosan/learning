package game2048;

import java.util.Scanner;

/**
  2  0  0  4  
  4  0  4  8  
  4  4  2  8  
  2  4  8  2 
 * 
 * 
 * */
public class Main {
	
	static int data[][] = null;

	public static void main(String []args){
		
		if(!init())
			System.err.println("Initial fail !");
		dispaly(data);
	
		char c;
		while( ( c = (new Scanner(System.in).nextLine().charAt(0))) !=' ')
			{
				switch (c) {
				case 'w':
					Up(data);
					break;
				case 's':
					data = Down(data);
					break;
				case 'a':
					data = Left(data);
					break;
				case 'd':
					data = Right(data);
					break;
				default:
					System.out.println("Good Bye");
					System.exit(0);
				}
				dispaly(data);
			};
		
	/* 从控制台录入信息
	 * Scanner sc = new Scanner(System.in);
	 * String dir = sc.nextLine();  或者  String dir = sc.next();
	 */
		
	}
	
	
	/**
	 * 
	 * 
	 * */
	static boolean init(){
		data = new int [4][4];
		if (null == data) {
			return false;
		}
		data[0][0] =8;
		data[0][1] =0;
		data[0][2] =0;
		data[0][3] =4;
		data[1][0] =4;
		data[1][1] =4;
		data[1][2] =4;
		data[1][3] =8;
		data[2][0] =4;
		data[2][1] =0;
		data[2][2] =4;
		data[2][3] =8;
		data[3][0] =2;
		data[3][1] =4;
		data[3][2] =8;
		data[3][3] =2;
		return true;
	}
	
	
	/**
	 * 
	 * 
	 * */
	static void dispaly(int data[][]){
		for (int nRow = 0; nRow < data.length; nRow++) {
			for(int nCol =0;nCol <data[nRow].length;nCol++)
				System.out.print(data[nRow][nCol]+"  ");
			System.out.println();
		}
	}
	
	
	
	/**
	 * 
	 * 
	 * */
	static void Up(int data[][]){
		
		//erase zero
		for (int nRow = 0; nRow < data.length; nRow++) {
			for (int nCol = 0; nCol < data[nRow].length; nCol++) {
				if(0 == data[nRow][nCol] && nRow<3){
					int tmpRow = nRow;
					while (0 == data[tmpRow][nCol] && tmpRow < 3)
						tmpRow++;
					data[nRow][nCol] = data[tmpRow][nCol];
					data[tmpRow][nCol] = 0;
				}
			}
		}
		
		
		// Up
		for (int nRow = 0; nRow < data.length; nRow++) {
			for(int nCol = 0;nCol <data[nRow].length;nCol++){
				if(3 == nRow)return;
				if (data[nRow][nCol] == data[nRow+1][nCol] | 0 == data[nRow][nCol]) {
					data[nRow][nCol] += data[nRow+1][nCol];
					data[nRow+1][nCol] = 0;
				}
			}
		}
		
	}
	

	static int[][] Down(int data[][]){
		
		int tmpData[][] =  new int[data.length][data[0].length];
		//Rotate 
		for (int nRow = 0; nRow < tmpData.length; nRow++) {
			for(int nCol = 0;nCol < tmpData[nRow].length;nCol++)
				tmpData[nRow][nCol] = data[3-nRow][nCol];
		}
		
	
		Up(tmpData);
		
		//Rotate back
		for (int nRow = 0; nRow < tmpData.length; nRow++) {
			for(int nCol = 0;nCol < tmpData[nRow].length;nCol++)
				data[nRow][nCol] = tmpData[3-nRow][nCol];
		}
		tmpData = null;
		return data;
	}
	
	
	/**
	 * 
	 * 
	 * */
	
	static int[][] Left(int data[][]){
		int tmpData[][] = new int [data.length][data[0].length];
		//Rotate
		for (int nRow = 0; nRow < tmpData.length; nRow++) {
			for (int nCol = 0; nCol < tmpData[nRow].length; nCol++) {
				tmpData[nRow][nCol] = data[3-nCol][nRow];
			}
		}
		
		Up(tmpData);
		
		//Rotate back
		for (int nRow = 0; nRow < tmpData.length; nRow++) {
			for (int nCol = 0; nCol < tmpData[nRow].length; nCol++) {
				data[nRow][nCol] = tmpData[nCol][3-nRow];
			}
		}
		tmpData = null;
		return data;
	}
	
	
	
	/**
	 * 
	 * 
	 * */
	static int[][] Right(int data[][]){
		int tmpData[][] = new int [data.length][data[0].length];
		//Rotate
		for (int nRow = 0; nRow < tmpData.length; nRow++) {
			for (int nCol = 0; nCol < tmpData[nRow].length; nCol++) {
				tmpData[nRow][nCol] = data[nCol][3-nRow];
			}
		}

		Up(tmpData);
		
		//Rotate back
		for (int nRow = 0; nRow < tmpData.length; nRow++) {
			for (int nCol = 0; nCol < tmpData[nRow].length; nCol++) {
				data[nRow][nCol] = tmpData[3-nCol][nRow];
			}
		}
		tmpData = null;
		return data;
	}
}

